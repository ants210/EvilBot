<?php
namespace x9119x;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ApplicationType {
  const IOS = 16;
  const IOS_RC = 17;
  const IOS_BETA = 18;
  const IOS_ALPHA = 19;
  const ANDROID = 32;
  const ANDROID_RC = 33;
  const ANDROID_BETA = 34;
  const ANDROID_ALPHA = 35;
  const WAP = 48;
  const WAP_RC = 49;
  const WAP_BETA = 50;
  const WAP_ALPHA = 51;
  const BOT = 64;
  const BOT_RC = 65;
  const BOT_BETA = 66;
  const BOT_ALPHA = 67;
  const WEB = 80;
  const WEB_RC = 81;
  const WEB_BETA = 82;
  const WEB_ALPHA = 83;
  const DESKTOPWIN = 96;
  const DESKTOPWIN_RC = 97;
  const DESKTOPWIN_BETA = 98;
  const DESKTOPWIN_ALPHA = 99;
  const DESKTOPMAC = 112;
  const DESKTOPMAC_RC = 113;
  const DESKTOPMAC_BETA = 114;
  const DESKTOPMAC_ALPHA = 115;
  const CHANNELGW = 128;
  const CHANNELGW_RC = 129;
  const CHANNELGW_BETA = 130;
  const CHANNELGW_ALPHA = 131;
  const CHANNELCP = 144;
  const CHANNELCP_RC = 145;
  const CHANNELCP_BETA = 146;
  const CHANNELCP_ALPHA = 147;
  const WINPHONE = 160;
  const WINPHONE_RC = 161;
  const WINPHONE_BETA = 162;
  const WINPHONE_ALPHA = 163;
  const BLACKBERRY = 176;
  const BLACKBERRY_RC = 177;
  const BLACKBERRY_BETA = 178;
  const BLACKBERRY_ALPHA = 179;
  const WINMETRO = 192;
  const WINMETRO_RC = 193;
  const WINMETRO_BETA = 194;
  const WINMETRO_ALPHA = 195;
  const S40 = 208;
  const S40_RC = 209;
  const S40_BETA = 210;
  const S40_ALPHA = 211;
  const CHRONO = 224;
  const CHRONO_RC = 225;
  const CHRONO_BETA = 226;
  const CHRONO_ALPHA = 227;
  const TIZEN = 256;
  const TIZEN_RC = 257;
  const TIZEN_BETA = 258;
  const TIZEN_ALPHA = 259;
  const VIRTUAL = 272;
  static public $__names = array(
    16 => 'IOS',
    17 => 'IOS_RC',
    18 => 'IOS_BETA',
    19 => 'IOS_ALPHA',
    32 => 'ANDROID',
    33 => 'ANDROID_RC',
    34 => 'ANDROID_BETA',
    35 => 'ANDROID_ALPHA',
    48 => 'WAP',
    49 => 'WAP_RC',
    50 => 'WAP_BETA',
    51 => 'WAP_ALPHA',
    64 => 'BOT',
    65 => 'BOT_RC',
    66 => 'BOT_BETA',
    67 => 'BOT_ALPHA',
    80 => 'WEB',
    81 => 'WEB_RC',
    82 => 'WEB_BETA',
    83 => 'WEB_ALPHA',
    96 => 'DESKTOPWIN',
    97 => 'DESKTOPWIN_RC',
    98 => 'DESKTOPWIN_BETA',
    99 => 'DESKTOPWIN_ALPHA',
    112 => 'DESKTOPMAC',
    113 => 'DESKTOPMAC_RC',
    114 => 'DESKTOPMAC_BETA',
    115 => 'DESKTOPMAC_ALPHA',
    128 => 'CHANNELGW',
    129 => 'CHANNELGW_RC',
    130 => 'CHANNELGW_BETA',
    131 => 'CHANNELGW_ALPHA',
    144 => 'CHANNELCP',
    145 => 'CHANNELCP_RC',
    146 => 'CHANNELCP_BETA',
    147 => 'CHANNELCP_ALPHA',
    160 => 'WINPHONE',
    161 => 'WINPHONE_RC',
    162 => 'WINPHONE_BETA',
    163 => 'WINPHONE_ALPHA',
    176 => 'BLACKBERRY',
    177 => 'BLACKBERRY_RC',
    178 => 'BLACKBERRY_BETA',
    179 => 'BLACKBERRY_ALPHA',
    192 => 'WINMETRO',
    193 => 'WINMETRO_RC',
    194 => 'WINMETRO_BETA',
    195 => 'WINMETRO_ALPHA',
    208 => 'S40',
    209 => 'S40_RC',
    210 => 'S40_BETA',
    211 => 'S40_ALPHA',
    224 => 'CHRONO',
    225 => 'CHRONO_RC',
    226 => 'CHRONO_BETA',
    227 => 'CHRONO_ALPHA',
    256 => 'TIZEN',
    257 => 'TIZEN_RC',
    258 => 'TIZEN_BETA',
    259 => 'TIZEN_ALPHA',
    272 => 'VIRTUAL',
  );
}

final class ContactAttribute {
  const CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1;
  const CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2;
  const CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16;
  const CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32;
  static public $__names = array(
    1 => 'CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL',
    2 => 'CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL',
    16 => 'CONTACT_ATTRIBUTE_CAPABLE_MY_HOME',
    32 => 'CONTACT_ATTRIBUTE_CAPABLE_BUDDY',
  );
}

final class ContactCategory {
  const NORMAL = 0;
  const RECOMMEND = 1;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'RECOMMEND',
  );
}

final class ContactRelation {
  const ONEWAY = 0;
  const BOTH = 1;
  const NOT_REGISTERED = 2;
  static public $__names = array(
    0 => 'ONEWAY',
    1 => 'BOTH',
    2 => 'NOT_REGISTERED',
  );
}

final class ContactSetting {
  const CONTACT_SETTING_NOTIFICATION_DISABLE = 1;
  const CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2;
  const CONTACT_SETTING_CONTACT_HIDE = 4;
  const CONTACT_SETTING_FAVORITE = 8;
  const CONTACT_SETTING_DELETE = 16;
  static public $__names = array(
    1 => 'CONTACT_SETTING_NOTIFICATION_DISABLE',
    2 => 'CONTACT_SETTING_DISPLAY_NAME_OVERRIDE',
    4 => 'CONTACT_SETTING_CONTACT_HIDE',
    8 => 'CONTACT_SETTING_FAVORITE',
    16 => 'CONTACT_SETTING_DELETE',
  );
}

final class ContactStatus {
  const UNSPECIFIED = 0;
  const FRIEND = 1;
  const FRIEND_BLOCKED = 2;
  const RECOMMEND = 3;
  const RECOMMEND_BLOCKED = 4;
  const DELETED = 5;
  const DELETED_BLOCKED = 6;
  static public $__names = array(
    0 => 'UNSPECIFIED',
    1 => 'FRIEND',
    2 => 'FRIEND_BLOCKED',
    3 => 'RECOMMEND',
    4 => 'RECOMMEND_BLOCKED',
    5 => 'DELETED',
    6 => 'DELETED_BLOCKED',
  );
}

final class ContactType {
  const MID = 0;
  const PHONE = 1;
  const EMAIL = 2;
  const USERID = 3;
  const PROXIMITY = 4;
  const GROUP = 5;
  const USER = 6;
  const QRCODE = 7;
  const PROMOTION_BOT = 8;
  const REPAIR = 128;
  const FACEBOOK = 2305;
  const SINA = 2306;
  const RENREN = 2307;
  const FEIXIN = 2308;
  static public $__names = array(
    0 => 'MID',
    1 => 'PHONE',
    2 => 'EMAIL',
    3 => 'USERID',
    4 => 'PROXIMITY',
    5 => 'GROUP',
    6 => 'USER',
    7 => 'QRCODE',
    8 => 'PROMOTION_BOT',
    128 => 'REPAIR',
    2305 => 'FACEBOOK',
    2306 => 'SINA',
    2307 => 'RENREN',
    2308 => 'FEIXIN',
  );
}

final class ContentType {
  const NONE = 0;
  const IMAGE = 1;
  const VIDEO = 2;
  const AUDIO = 3;
  const HTML = 4;
  const PDF = 5;
  const CALL = 6;
  const STICKER = 7;
  const PRESENCE = 8;
  const GIFT = 9;
  const GROUPBOARD = 10;
  const APPLINK = 11;
  const LINK = 12;
  const CONTACT = 13;
  const FILE = 14;
  const LOCATION = 15;
  const POSTNOTIFICATION = 16;
  const RICH = 17;
  const CHATEVENT = 18;
  static public $__names = array(
    0 => 'NONE',
    1 => 'IMAGE',
    2 => 'VIDEO',
    3 => 'AUDIO',
    4 => 'HTML',
    5 => 'PDF',
    6 => 'CALL',
    7 => 'STICKER',
    8 => 'PRESENCE',
    9 => 'GIFT',
    10 => 'GROUPBOARD',
    11 => 'APPLINK',
    12 => 'LINK',
    13 => 'CONTACT',
    14 => 'FILE',
    15 => 'LOCATION',
    16 => 'POSTNOTIFICATION',
    17 => 'RICH',
    18 => 'CHATEVENT',
  );
}

final class CustomMode {
  const PROMOTION_FRIENDS_INVITE = 1;
  const CAPABILITY_SERVER_SIDE_SMS = 2;
  const LINE_CLIENT_ANALYTICS_CONFIGURATION = 3;
  static public $__names = array(
    1 => 'PROMOTION_FRIENDS_INVITE',
    2 => 'CAPABILITY_SERVER_SIDE_SMS',
    3 => 'LINE_CLIENT_ANALYTICS_CONFIGURATION',
  );
}

final class EmailConfirmationStatus {
  const NOT_SPECIFIED = 0;
  const NOT_YET = 1;
  const DONE = 3;
  static public $__names = array(
    0 => 'NOT_SPECIFIED',
    1 => 'NOT_YET',
    3 => 'DONE',
  );
}

final class EmailConfirmationType {
  const SERVER_SIDE_EMAIL = 0;
  const CLIENT_SIDE_EMAIL = 1;
  static public $__names = array(
    0 => 'SERVER_SIDE_EMAIL',
    1 => 'CLIENT_SIDE_EMAIL',
  );
}

final class ErrorCode {
  const ILLEGAL_ARGUMENT = 0;
  const AUTHENTICATION_FAILED = 1;
  const DB_FAILED = 2;
  const INVALID_STATE = 3;
  const EXCESSIVE_ACCESS = 4;
  const NOT_FOUND = 5;
  const INVALID_LENGTH = 6;
  const NOT_AVAILABLE_USER = 7;
  const NOT_AUTHORIZED_DEVICE = 8;
  const INVALID_MID = 9;
  const NOT_A_MEMBER = 10;
  const INCOMPATIBLE_APP_VERSION = 11;
  const NOT_READY = 12;
  const NOT_AVAILABLE_SESSION = 13;
  const NOT_AUTHORIZED_SESSION = 14;
  const SYSTEM_ERROR = 15;
  const NO_AVAILABLE_VERIFICATION_METHOD = 16;
  const NOT_AUTHENTICATED = 17;
  const INVALID_IDENTITY_CREDENTIAL = 18;
  const NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19;
  const INTERNAL_ERROR = 20;
  const NO_SUCH_IDENTITY_IDENFIER = 21;
  const DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22;
  const ILLEGAL_IDENTITY_CREDENTIAL = 23;
  const UNKNOWN_CHANNEL = 24;
  const NO_SUCH_MESSAGE_BOX = 25;
  const NOT_AVAILABLE_MESSAGE_BOX = 26;
  const CHANNEL_DOES_NOT_MATCH = 27;
  const NOT_YOUR_MESSAGE = 28;
  const MESSAGE_DEFINED_ERROR = 29;
  const USER_CANNOT_ACCEPT_PRESENTS = 30;
  const USER_NOT_STICKER_OWNER = 32;
  const MAINTENANCE_ERROR = 33;
  const ACCOUNT_NOT_MATCHED = 34;
  const ABUSE_BLOCK = 35;
  const NOT_FRIEND = 36;
  const NOT_ALLOWED_CALL = 37;
  const BLOCK_FRIEND = 38;
  const INCOMPATIBLE_VOIP_VERSION = 39;
  const INVALID_SNS_ACCESS_TOKEN = 40;
  const EXTERNAL_SERVICE_NOT_AVAILABLE = 41;
  const NOT_ALLOWED_ADD_CONTACT = 42;
  const NOT_CERTIFICATED = 43;
  const NOT_ALLOWED_SECONDARY_DEVICE = 44;
  const INVALID_PIN_CODE = 45;
  const NOT_FOUND_IDENTITY_CREDENTIAL = 46;
  const EXCEED_FILE_MAX_SIZE = 47;
  const EXCEED_DAILY_QUOTA = 48;
  const NOT_SUPPORT_SEND_FILE = 49;
  const MUST_UPGRADE = 50;
  const NOT_AVAILABLE_PIN_CODE_SESSION = 51;
  static public $__names = array(
    0 => 'ILLEGAL_ARGUMENT',
    1 => 'AUTHENTICATION_FAILED',
    2 => 'DB_FAILED',
    3 => 'INVALID_STATE',
    4 => 'EXCESSIVE_ACCESS',
    5 => 'NOT_FOUND',
    6 => 'INVALID_LENGTH',
    7 => 'NOT_AVAILABLE_USER',
    8 => 'NOT_AUTHORIZED_DEVICE',
    9 => 'INVALID_MID',
    10 => 'NOT_A_MEMBER',
    11 => 'INCOMPATIBLE_APP_VERSION',
    12 => 'NOT_READY',
    13 => 'NOT_AVAILABLE_SESSION',
    14 => 'NOT_AUTHORIZED_SESSION',
    15 => 'SYSTEM_ERROR',
    16 => 'NO_AVAILABLE_VERIFICATION_METHOD',
    17 => 'NOT_AUTHENTICATED',
    18 => 'INVALID_IDENTITY_CREDENTIAL',
    19 => 'NOT_AVAILABLE_IDENTITY_IDENTIFIER',
    20 => 'INTERNAL_ERROR',
    21 => 'NO_SUCH_IDENTITY_IDENFIER',
    22 => 'DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY',
    23 => 'ILLEGAL_IDENTITY_CREDENTIAL',
    24 => 'UNKNOWN_CHANNEL',
    25 => 'NO_SUCH_MESSAGE_BOX',
    26 => 'NOT_AVAILABLE_MESSAGE_BOX',
    27 => 'CHANNEL_DOES_NOT_MATCH',
    28 => 'NOT_YOUR_MESSAGE',
    29 => 'MESSAGE_DEFINED_ERROR',
    30 => 'USER_CANNOT_ACCEPT_PRESENTS',
    32 => 'USER_NOT_STICKER_OWNER',
    33 => 'MAINTENANCE_ERROR',
    34 => 'ACCOUNT_NOT_MATCHED',
    35 => 'ABUSE_BLOCK',
    36 => 'NOT_FRIEND',
    37 => 'NOT_ALLOWED_CALL',
    38 => 'BLOCK_FRIEND',
    39 => 'INCOMPATIBLE_VOIP_VERSION',
    40 => 'INVALID_SNS_ACCESS_TOKEN',
    41 => 'EXTERNAL_SERVICE_NOT_AVAILABLE',
    42 => 'NOT_ALLOWED_ADD_CONTACT',
    43 => 'NOT_CERTIFICATED',
    44 => 'NOT_ALLOWED_SECONDARY_DEVICE',
    45 => 'INVALID_PIN_CODE',
    46 => 'NOT_FOUND_IDENTITY_CREDENTIAL',
    47 => 'EXCEED_FILE_MAX_SIZE',
    48 => 'EXCEED_DAILY_QUOTA',
    49 => 'NOT_SUPPORT_SEND_FILE',
    50 => 'MUST_UPGRADE',
    51 => 'NOT_AVAILABLE_PIN_CODE_SESSION',
  );
}

final class FeatureType {
  const OBJECT_STORAGE = 1;
  static public $__names = array(
    1 => 'OBJECT_STORAGE',
  );
}

final class GroupAttribute {
  const NAME = 1;
  const PICTURE_STATUS = 2;
  const ALL = 255;
  static public $__names = array(
    1 => 'NAME',
    2 => 'PICTURE_STATUS',
    255 => 'ALL',
  );
}

final class IdentityProvider {
  const UNKNOWN = 0;
  const LINE = 1;
  const NAVER_KR = 2;
  static public $__names = array(
    0 => 'UNKNOWN',
    1 => 'LINE',
    2 => 'NAVER_KR',
  );
}

final class LoginResultType {
  const SUCCESS = 1;
  const REQUIRE_QRCODE = 2;
  const REQUIRE_DEVICE_CONFIRM = 3;
  static public $__names = array(
    1 => 'SUCCESS',
    2 => 'REQUIRE_QRCODE',
    3 => 'REQUIRE_DEVICE_CONFIRM',
  );
}

final class MessageOperationType {
  const SEND_MESSAGE = 1;
  const RECEIVE_MESSAGE = 2;
  const READ_MESSAGE = 3;
  const NOTIFIED_READ_MESSAGE = 4;
  const NOTIFIED_JOIN_CHAT = 5;
  const FAILED_SEND_MESSAGE = 6;
  const SEND_CONTENT = 7;
  const SEND_CONTENT_RECEIPT = 8;
  const SEND_CHAT_REMOVED = 9;
  const REMOVE_ALL_MESSAGES = 10;
  static public $__names = array(
    1 => 'SEND_MESSAGE',
    2 => 'RECEIVE_MESSAGE',
    3 => 'READ_MESSAGE',
    4 => 'NOTIFIED_READ_MESSAGE',
    5 => 'NOTIFIED_JOIN_CHAT',
    6 => 'FAILED_SEND_MESSAGE',
    7 => 'SEND_CONTENT',
    8 => 'SEND_CONTENT_RECEIPT',
    9 => 'SEND_CHAT_REMOVED',
    10 => 'REMOVE_ALL_MESSAGES',
  );
}

final class MIDType {
  const USER = 0;
  const ROOM = 1;
  const GROUP = 2;
  static public $__names = array(
    0 => 'USER',
    1 => 'ROOM',
    2 => 'GROUP',
  );
}

final class ModificationType {
  const ADD = 0;
  const REMOVE = 1;
  const MODIFY = 2;
  static public $__names = array(
    0 => 'ADD',
    1 => 'REMOVE',
    2 => 'MODIFY',
  );
}

final class OpStatus {
  const NORMAL = 0;
  const ALERT_DISABLED = 1;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'ALERT_DISABLED',
  );
}

final class OpType {
  const END_OF_OPERATION = 0;
  const UPDATE_PROFILE = 1;
  const NOTIFIED_UPDATE_PROFILE = 2;
  const REGISTER_USERID = 3;
  const ADD_CONTACT = 4;
  const NOTIFIED_ADD_CONTACT = 5;
  const BLOCK_CONTACT = 6;
  const UNBLOCK_CONTACT = 7;
  const NOTIFIED_RECOMMEND_CONTACT = 8;
  const CREATE_GROUP = 9;
  const UPDATE_GROUP = 10;
  const NOTIFIED_UPDATE_GROUP = 11;
  const INVITE_INTO_GROUP = 12;
  const NOTIFIED_INVITE_INTO_GROUP = 13;
  const LEAVE_GROUP = 14;
  const NOTIFIED_LEAVE_GROUP = 15;
  const ACCEPT_GROUP_INVITATION = 16;
  const NOTIFIED_ACCEPT_GROUP_INVITATION = 17;
  const KICKOUT_FROM_GROUP = 18;
  const NOTIFIED_KICKOUT_FROM_GROUP = 19;
  const CREATE_ROOM = 20;
  const INVITE_INTO_ROOM = 21;
  const NOTIFIED_INVITE_INTO_ROOM = 22;
  const LEAVE_ROOM = 23;
  const NOTIFIED_LEAVE_ROOM = 24;
  const SEND_MESSAGE = 25;
  const RECEIVE_MESSAGE = 26;
  const SEND_MESSAGE_RECEIPT = 27;
  const RECEIVE_MESSAGE_RECEIPT = 28;
  const SEND_CONTENT_RECEIPT = 29;
  const RECEIVE_ANNOUNCEMENT = 30;
  const CANCEL_INVITATION_GROUP = 31;
  const NOTIFIED_CANCEL_INVITATION_GROUP = 32;
  const NOTIFIED_UNREGISTER_USER = 33;
  const REJECT_GROUP_INVITATION = 34;
  const NOTIFIED_REJECT_GROUP_INVITATION = 35;
  const UPDATE_SETTINGS = 36;
  const NOTIFIED_REGISTER_USER = 37;
  const INVITE_VIA_EMAIL = 38;
  const NOTIFIED_REQUEST_RECOVERY = 39;
  const SEND_CHAT_CHECKED = 40;
  const SEND_CHAT_REMOVED = 41;
  const NOTIFIED_FORCE_SYNC = 42;
  const SEND_CONTENT = 43;
  const SEND_MESSAGE_MYHOME = 44;
  const NOTIFIED_UPDATE_CONTENT_PREVIEW = 45;
  const REMOVE_ALL_MESSAGES = 46;
  const NOTIFIED_UPDATE_PURCHASES = 47;
  const DUMMY = 48;
  const UPDATE_CONTACT = 49;
  const NOTIFIED_RECEIVED_CALL = 50;
  const CANCEL_CALL = 51;
  const NOTIFIED_REDIRECT = 52;
  const NOTIFIED_CHANNEL_SYNC = 53;
  const FAILED_SEND_MESSAGE = 54;
  const NOTIFIED_READ_MESSAGE = 55;
  const FAILED_EMAIL_CONFIRMATION = 56;
  const NOTIFIED_CHAT_CONTENT = 58;
  const NOTIFIED_PUSH_NOTICENTER_ITEM = 59;
  static public $__names = array(
    0 => 'END_OF_OPERATION',
    1 => 'UPDATE_PROFILE',
    2 => 'NOTIFIED_UPDATE_PROFILE',
    3 => 'REGISTER_USERID',
    4 => 'ADD_CONTACT',
    5 => 'NOTIFIED_ADD_CONTACT',
    6 => 'BLOCK_CONTACT',
    7 => 'UNBLOCK_CONTACT',
    8 => 'NOTIFIED_RECOMMEND_CONTACT',
    9 => 'CREATE_GROUP',
    10 => 'UPDATE_GROUP',
    11 => 'NOTIFIED_UPDATE_GROUP',
    12 => 'INVITE_INTO_GROUP',
    13 => 'NOTIFIED_INVITE_INTO_GROUP',
    14 => 'LEAVE_GROUP',
    15 => 'NOTIFIED_LEAVE_GROUP',
    16 => 'ACCEPT_GROUP_INVITATION',
    17 => 'NOTIFIED_ACCEPT_GROUP_INVITATION',
    18 => 'KICKOUT_FROM_GROUP',
    19 => 'NOTIFIED_KICKOUT_FROM_GROUP',
    20 => 'CREATE_ROOM',
    21 => 'INVITE_INTO_ROOM',
    22 => 'NOTIFIED_INVITE_INTO_ROOM',
    23 => 'LEAVE_ROOM',
    24 => 'NOTIFIED_LEAVE_ROOM',
    25 => 'SEND_MESSAGE',
    26 => 'RECEIVE_MESSAGE',
    27 => 'SEND_MESSAGE_RECEIPT',
    28 => 'RECEIVE_MESSAGE_RECEIPT',
    29 => 'SEND_CONTENT_RECEIPT',
    30 => 'RECEIVE_ANNOUNCEMENT',
    31 => 'CANCEL_INVITATION_GROUP',
    32 => 'NOTIFIED_CANCEL_INVITATION_GROUP',
    33 => 'NOTIFIED_UNREGISTER_USER',
    34 => 'REJECT_GROUP_INVITATION',
    35 => 'NOTIFIED_REJECT_GROUP_INVITATION',
    36 => 'UPDATE_SETTINGS',
    37 => 'NOTIFIED_REGISTER_USER',
    38 => 'INVITE_VIA_EMAIL',
    39 => 'NOTIFIED_REQUEST_RECOVERY',
    40 => 'SEND_CHAT_CHECKED',
    41 => 'SEND_CHAT_REMOVED',
    42 => 'NOTIFIED_FORCE_SYNC',
    43 => 'SEND_CONTENT',
    44 => 'SEND_MESSAGE_MYHOME',
    45 => 'NOTIFIED_UPDATE_CONTENT_PREVIEW',
    46 => 'REMOVE_ALL_MESSAGES',
    47 => 'NOTIFIED_UPDATE_PURCHASES',
    48 => 'DUMMY',
    49 => 'UPDATE_CONTACT',
    50 => 'NOTIFIED_RECEIVED_CALL',
    51 => 'CANCEL_CALL',
    52 => 'NOTIFIED_REDIRECT',
    53 => 'NOTIFIED_CHANNEL_SYNC',
    54 => 'FAILED_SEND_MESSAGE',
    55 => 'NOTIFIED_READ_MESSAGE',
    56 => 'FAILED_EMAIL_CONFIRMATION',
    58 => 'NOTIFIED_CHAT_CONTENT',
    59 => 'NOTIFIED_PUSH_NOTICENTER_ITEM',
  );
}

final class ProfileAttribute {
  const EMAIL = 1;
  const DISPLAY_NAME = 2;
  const PHONETIC_NAME = 4;
  const PICTURE = 8;
  const STATUS_MESSAGE = 16;
  const ALLOW_SEARCH_BY_USERID = 32;
  const ALLOW_SEARCH_BY_EMAIL = 64;
  const BUDDY_STATUS = 128;
  const ALL = 255;
  static public $__names = array(
    1 => 'EMAIL',
    2 => 'DISPLAY_NAME',
    4 => 'PHONETIC_NAME',
    8 => 'PICTURE',
    16 => 'STATUS_MESSAGE',
    32 => 'ALLOW_SEARCH_BY_USERID',
    64 => 'ALLOW_SEARCH_BY_EMAIL',
    128 => 'BUDDY_STATUS',
    255 => 'ALL',
  );
}

final class PublicType {
  const HIDDEN = 0;
  const _PUBLIC = 1000;
  static public $__names = array(
    0 => 'HIDDEN',
    1000 => '_PUBLIC',
  );
}

final class RedirectType {
  const NONE = 0;
  const EXPIRE_SECOND = 1;
  static public $__names = array(
    0 => 'NONE',
    1 => 'EXPIRE_SECOND',
  );
}

final class RegistrationType {
  const PHONE = 0;
  const EMAIL_WAP = 1;
  const FACEBOOK = 2305;
  const SINA = 2306;
  const RENREN = 2307;
  const FEIXIN = 2308;
  static public $__names = array(
    0 => 'PHONE',
    1 => 'EMAIL_WAP',
    2305 => 'FACEBOOK',
    2306 => 'SINA',
    2307 => 'RENREN',
    2308 => 'FEIXIN',
  );
}

final class SettingsAttribute {
  const NOTIFICATION_ENABLE = 1;
  const NOTIFICATION_MUTE_EXPIRATION = 2;
  const NOTIFICATION_NEW_MESSAGE = 4;
  const NOTIFICATION_GROUP_INVITATION = 8;
  const NOTIFICATION_SHOW_MESSAGE = 16;
  const NOTIFICATION_INCOMING_CALL = 32;
  const PRIVACY_SYNC_CONTACTS = 64;
  const PRIVACY_SEARCH_BY_PHONE_NUMBER = 128;
  const NOTIFICATION_SOUND_MESSAGE = 256;
  const NOTIFICATION_SOUND_GROUP = 512;
  const CONTACT_MY_TICKET = 1024;
  const IDENTITY_PROVIDER = 2048;
  const IDENTITY_IDENTIFIER = 4096;
  const PRIVACY_SEARCH_BY_USERID = 8192;
  const PRIVACY_SEARCH_BY_EMAIL = 16384;
  const PREFERENCE_LOCALE = 32768;
  const NOTIFICATION_DISABLED_WITH_SUB = 65536;
  const SNS_ACCOUNT = 524288;
  const PHONE_REGISTRATION = 1048576;
  const PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152;
  const CUSTOM_MODE = 4194304;
  const PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608;
  const EMAIL_CONFIRMATION_STATUS = 16777216;
  const PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432;
  const ALL = 2147483647;
  static public $__names = array(
    1 => 'NOTIFICATION_ENABLE',
    2 => 'NOTIFICATION_MUTE_EXPIRATION',
    4 => 'NOTIFICATION_NEW_MESSAGE',
    8 => 'NOTIFICATION_GROUP_INVITATION',
    16 => 'NOTIFICATION_SHOW_MESSAGE',
    32 => 'NOTIFICATION_INCOMING_CALL',
    64 => 'PRIVACY_SYNC_CONTACTS',
    128 => 'PRIVACY_SEARCH_BY_PHONE_NUMBER',
    256 => 'NOTIFICATION_SOUND_MESSAGE',
    512 => 'NOTIFICATION_SOUND_GROUP',
    1024 => 'CONTACT_MY_TICKET',
    2048 => 'IDENTITY_PROVIDER',
    4096 => 'IDENTITY_IDENTIFIER',
    8192 => 'PRIVACY_SEARCH_BY_USERID',
    16384 => 'PRIVACY_SEARCH_BY_EMAIL',
    32768 => 'PREFERENCE_LOCALE',
    65536 => 'NOTIFICATION_DISABLED_WITH_SUB',
    524288 => 'SNS_ACCOUNT',
    1048576 => 'PHONE_REGISTRATION',
    2097152 => 'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN',
    4194304 => 'CUSTOM_MODE',
    8388608 => 'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME',
    16777216 => 'EMAIL_CONFIRMATION_STATUS',
    33554432 => 'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND',
    2147483647 => 'ALL',
  );
}

final class SpammerReason {
  const OTHER = 0;
  const ADVERTISING = 1;
  const GENDER_HARASSMENT = 2;
  const HARASSMENT = 3;
  static public $__names = array(
    0 => 'OTHER',
    1 => 'ADVERTISING',
    2 => 'GENDER_HARASSMENT',
    3 => 'HARASSMENT',
  );
}

final class SyncActionType {
  const SYNC = 0;
  const REPORT = 1;
  static public $__names = array(
    0 => 'SYNC',
    1 => 'REPORT',
  );
}

final class SyncCategory {
  const PROFILE = 0;
  const SETTINGS = 1;
  const OPS = 2;
  const CONTACT = 3;
  const RECOMMEND = 4;
  const BLOCK = 5;
  const GROUP = 6;
  const ROOM = 7;
  const NOTIFICATION = 8;
  static public $__names = array(
    0 => 'PROFILE',
    1 => 'SETTINGS',
    2 => 'OPS',
    3 => 'CONTACT',
    4 => 'RECOMMEND',
    5 => 'BLOCK',
    6 => 'GROUP',
    7 => 'ROOM',
    8 => 'NOTIFICATION',
  );
}

final class UniversalNotificationServiceErrorCode {
  const INTERNAL_ERROR = 0;
  const INVALID_KEY = 1;
  const ILLEGAL_ARGUMENT = 2;
  const TOO_MANY_REQUEST = 3;
  const AUTHENTICATION_FAILED = 4;
  const NO_WRITE_PERMISSION = 5;
  static public $__names = array(
    0 => 'INTERNAL_ERROR',
    1 => 'INVALID_KEY',
    2 => 'ILLEGAL_ARGUMENT',
    3 => 'TOO_MANY_REQUEST',
    4 => 'AUTHENTICATION_FAILED',
    5 => 'NO_WRITE_PERMISSION',
  );
}

final class UnregistrationReason {
  const UNREGISTRATION_REASON_UNREGISTER_USER = 1;
  const UNREGISTRATION_REASON_UNBIND_DEVICE = 2;
  static public $__names = array(
    1 => 'UNREGISTRATION_REASON_UNREGISTER_USER',
    2 => 'UNREGISTRATION_REASON_UNBIND_DEVICE',
  );
}

final class UserAgeType {
  const OVER = 1;
  const UNDER = 2;
  const UNDEFINED = 3;
  static public $__names = array(
    1 => 'OVER',
    2 => 'UNDER',
    3 => 'UNDEFINED',
  );
}

final class VerificationMethod {
  const NO_AVAILABLE = 0;
  const PIN_VIA_SMS = 1;
  const CALLERID_INDIGO = 2;
  const PIN_VIA_TTS = 4;
  const SKIP = 10;
  static public $__names = array(
    0 => 'NO_AVAILABLE',
    1 => 'PIN_VIA_SMS',
    2 => 'CALLERID_INDIGO',
    4 => 'PIN_VIA_TTS',
    10 => 'SKIP',
  );
}

final class VerificationResult {
  const FAILED = 0;
  const OK_NOT_REGISTERED_YET = 1;
  const OK_REGISTERED_WITH_SAME_DEVICE = 2;
  const OK_REGISTERED_WITH_ANOTHER_DEVICE = 3;
  static public $__names = array(
    0 => 'FAILED',
    1 => 'OK_NOT_REGISTERED_YET',
    2 => 'OK_REGISTERED_WITH_SAME_DEVICE',
    3 => 'OK_REGISTERED_WITH_ANOTHER_DEVICE',
  );
}

final class WapInvitationType {
  const REGISTRATION = 1;
  const CHAT = 2;
  static public $__names = array(
    1 => 'REGISTRATION',
    2 => 'CHAT',
  );
}

class AuthQrcode {
  static $_TSPEC;

  /**
   * @var string
   */
  public $qrcode = null;
  /**
   * @var string
   */
  public $verifier = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'qrcode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'verifier',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['qrcode'])) {
        $this->qrcode = $vals['qrcode'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
    }
  }

  public function getName() {
    return 'AuthQrcode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->qrcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuthQrcode');
    if ($this->qrcode !== null) {
      $xfer += $output->writeFieldBegin('qrcode', TType::STRING, 1);
      $xfer += $output->writeString($this->qrcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 2);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Contact {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $relation = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $phoneticName = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var string
   */
  public $thumbnailUrl = null;
  /**
   * @var string
   */
  public $statusMessage = null;
  /**
   * @var string
   */
  public $displayNameOverridden = null;
  /**
   * @var int
   */
  public $favoriteTime = null;
  /**
   * @var bool
   */
  public $capableVoiceCall = null;
  /**
   * @var bool
   */
  public $capableVideoCall = null;
  /**
   * @var bool
   */
  public $capableMyhome = null;
  /**
   * @var bool
   */
  public $capableBuddy = null;
  /**
   * @var int
   */
  public $attributes = null;
  /**
   * @var int
   */
  public $settings = null;
  /**
   * @var string
   */
  public $picturePath = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'relation',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'phoneticName',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'pictureStatus',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'thumbnailUrl',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'statusMessage',
          'type' => TType::STRING,
          ),
        27 => array(
          'var' => 'displayNameOverridden',
          'type' => TType::STRING,
          ),
        28 => array(
          'var' => 'favoriteTime',
          'type' => TType::I64,
          ),
        31 => array(
          'var' => 'capableVoiceCall',
          'type' => TType::BOOL,
          ),
        32 => array(
          'var' => 'capableVideoCall',
          'type' => TType::BOOL,
          ),
        33 => array(
          'var' => 'capableMyhome',
          'type' => TType::BOOL,
          ),
        34 => array(
          'var' => 'capableBuddy',
          'type' => TType::BOOL,
          ),
        35 => array(
          'var' => 'attributes',
          'type' => TType::I32,
          ),
        36 => array(
          'var' => 'settings',
          'type' => TType::I64,
          ),
        37 => array(
          'var' => 'picturePath',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['relation'])) {
        $this->relation = $vals['relation'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['phoneticName'])) {
        $this->phoneticName = $vals['phoneticName'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
      if (isset($vals['displayNameOverridden'])) {
        $this->displayNameOverridden = $vals['displayNameOverridden'];
      }
      if (isset($vals['favoriteTime'])) {
        $this->favoriteTime = $vals['favoriteTime'];
      }
      if (isset($vals['capableVoiceCall'])) {
        $this->capableVoiceCall = $vals['capableVoiceCall'];
      }
      if (isset($vals['capableVideoCall'])) {
        $this->capableVideoCall = $vals['capableVideoCall'];
      }
      if (isset($vals['capableMyhome'])) {
        $this->capableMyhome = $vals['capableMyhome'];
      }
      if (isset($vals['capableBuddy'])) {
        $this->capableBuddy = $vals['capableBuddy'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['settings'])) {
        $this->settings = $vals['settings'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
    }
  }

  public function getName() {
    return 'Contact';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneticName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayNameOverridden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->favoriteTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableVoiceCall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableVideoCall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableMyhome);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableBuddy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->attributes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->settings);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Contact');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 10);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 11);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relation !== null) {
      $xfer += $output->writeFieldBegin('relation', TType::I32, 21);
      $xfer += $output->writeI32($this->relation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 22);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneticName !== null) {
      $xfer += $output->writeFieldBegin('phoneticName', TType::STRING, 23);
      $xfer += $output->writeString($this->phoneticName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 24);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 25);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 26);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayNameOverridden !== null) {
      $xfer += $output->writeFieldBegin('displayNameOverridden', TType::STRING, 27);
      $xfer += $output->writeString($this->displayNameOverridden);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->favoriteTime !== null) {
      $xfer += $output->writeFieldBegin('favoriteTime', TType::I64, 28);
      $xfer += $output->writeI64($this->favoriteTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableVoiceCall !== null) {
      $xfer += $output->writeFieldBegin('capableVoiceCall', TType::BOOL, 31);
      $xfer += $output->writeBool($this->capableVoiceCall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableVideoCall !== null) {
      $xfer += $output->writeFieldBegin('capableVideoCall', TType::BOOL, 32);
      $xfer += $output->writeBool($this->capableVideoCall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableMyhome !== null) {
      $xfer += $output->writeFieldBegin('capableMyhome', TType::BOOL, 33);
      $xfer += $output->writeBool($this->capableMyhome);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableBuddy !== null) {
      $xfer += $output->writeFieldBegin('capableBuddy', TType::BOOL, 34);
      $xfer += $output->writeBool($this->capableBuddy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      $xfer += $output->writeFieldBegin('attributes', TType::I32, 35);
      $xfer += $output->writeI32($this->attributes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->settings !== null) {
      $xfer += $output->writeFieldBegin('settings', TType::I64, 36);
      $xfer += $output->writeI64($this->settings);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 37);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Location {
  static $_TSPEC;

  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $address = null;
  /**
   * @var double
   */
  public $latitude = null;
  /**
   * @var double
   */
  public $longitude = null;
  /**
   * @var string
   */
  public $phone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'latitude',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'longitude',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
    }
  }

  public function getName() {
    return 'Location';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Location');
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 2);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 5);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CompactContact {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $modifiedTime = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $settings = null;
  /**
   * @var string
   */
  public $displayNameOverridden = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'modifiedTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'settings',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'displayNameOverridden',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['modifiedTime'])) {
        $this->modifiedTime = $vals['modifiedTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['settings'])) {
        $this->settings = $vals['settings'];
      }
      if (isset($vals['displayNameOverridden'])) {
        $this->displayNameOverridden = $vals['displayNameOverridden'];
      }
    }
  }

  public function getName() {
    return 'CompactContact';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->modifiedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->settings);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayNameOverridden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CompactContact');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modifiedTime !== null) {
      $xfer += $output->writeFieldBegin('modifiedTime', TType::I64, 3);
      $xfer += $output->writeI64($this->modifiedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->settings !== null) {
      $xfer += $output->writeFieldBegin('settings', TType::I64, 5);
      $xfer += $output->writeI64($this->settings);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayNameOverridden !== null) {
      $xfer += $output->writeFieldBegin('displayNameOverridden', TType::STRING, 6);
      $xfer += $output->writeString($this->displayNameOverridden);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Group {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var bool
   */
  public $preventJoinByTicket = null;
  /**
   * @var \x9119x\Contact[]
   */
  public $members = null;
  /**
   * @var \x9119x\Contact
   */
  public $creator = null;
  /**
   * @var \x9119x\Contact[]
   */
  public $invitee = null;
  /**
   * @var bool
   */
  public $notificationDisabled = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'pictureStatus',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'preventJoinByTicket',
          'type' => TType::BOOL,
          ),
        20 => array(
          'var' => 'members',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\x9119x\Contact',
            ),
          ),
        21 => array(
          'var' => 'creator',
          'type' => TType::STRUCT,
          'class' => '\x9119x\Contact',
          ),
        22 => array(
          'var' => 'invitee',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\x9119x\Contact',
            ),
          ),
        31 => array(
          'var' => 'notificationDisabled',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['preventJoinByTicket'])) {
        $this->preventJoinByTicket = $vals['preventJoinByTicket'];
      }
      if (isset($vals['members'])) {
        $this->members = $vals['members'];
      }
      if (isset($vals['creator'])) {
        $this->creator = $vals['creator'];
      }
      if (isset($vals['invitee'])) {
        $this->invitee = $vals['invitee'];
      }
      if (isset($vals['notificationDisabled'])) {
        $this->notificationDisabled = $vals['notificationDisabled'];
      }
    }
  }

  public function getName() {
    return 'Group';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->preventJoinByTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::LST) {
            $this->members = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \x9119x\Contact();
              $xfer += $elem5->read($input);
              $this->members []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRUCT) {
            $this->creator = new \x9119x\Contact();
            $xfer += $this->creator->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::LST) {
            $this->invitee = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \x9119x\Contact();
              $xfer += $elem11->read($input);
              $this->invitee []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationDisabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Group');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 10);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 11);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preventJoinByTicket !== null) {
      $xfer += $output->writeFieldBegin('preventJoinByTicket', TType::BOOL, 12);
      $xfer += $output->writeBool($this->preventJoinByTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->members !== null) {
      if (!is_array($this->members)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('members', TType::LST, 20);
      {
        $output->writeListBegin(TType::STRUCT, count($this->members));
        {
          foreach ($this->members as $iter12)
          {
            $xfer += $iter12->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creator !== null) {
      if (!is_object($this->creator)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creator', TType::STRUCT, 21);
      $xfer += $this->creator->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitee !== null) {
      if (!is_array($this->invitee)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitee', TType::LST, 22);
      {
        $output->writeListBegin(TType::STRUCT, count($this->invitee));
        {
          foreach ($this->invitee as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDisabled !== null) {
      $xfer += $output->writeFieldBegin('notificationDisabled', TType::BOOL, 31);
      $xfer += $output->writeBool($this->notificationDisabled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoginResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $authToken = null;
  /**
   * @var string
   */
  public $certificate = null;
  /**
   * @var string
   */
  public $verifier = null;
  /**
   * @var string
   */
  public $pinCode = null;
  /**
   * @var int
   */
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authToken',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'certificate',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'verifier',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'pinCode',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authToken'])) {
        $this->authToken = $vals['authToken'];
      }
      if (isset($vals['certificate'])) {
        $this->certificate = $vals['certificate'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
      if (isset($vals['pinCode'])) {
        $this->pinCode = $vals['pinCode'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'LoginResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->certificate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pinCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoginResult');
    if ($this->authToken !== null) {
      $xfer += $output->writeFieldBegin('authToken', TType::STRING, 1);
      $xfer += $output->writeString($this->authToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->certificate !== null) {
      $xfer += $output->writeFieldBegin('certificate', TType::STRING, 2);
      $xfer += $output->writeString($this->certificate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 3);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pinCode !== null) {
      $xfer += $output->writeFieldBegin('pinCode', TType::STRING, 4);
      $xfer += $output->writeString($this->pinCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 5);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Message {
  static $_TSPEC;

  /**
   * @var string
   */
  public $_from = null;
  /**
   * @var string
   */
  public $to = null;
  /**
   * @var int
   */
  public $toType = null;
  /**
   * @var string
   */
  public $id = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $deliveredTime = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var \x9119x\Location
   */
  public $location = null;
  /**
   * @var bool
   */
  public $hasContent = null;
  /**
   * @var int
   */
  public $contentType = null;
  /**
   * @var string
   */
  public $contentPreview = null;
  /**
   * @var array
   */
  public $contentMetadata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => '_from',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'to',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'toType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'deliveredTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'location',
          'type' => TType::STRUCT,
          'class' => '\x9119x\Location',
          ),
        14 => array(
          'var' => 'hasContent',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'contentType',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'contentPreview',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'contentMetadata',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['_from'])) {
        $this->_from = $vals['_from'];
      }
      if (isset($vals['to'])) {
        $this->to = $vals['to'];
      }
      if (isset($vals['toType'])) {
        $this->toType = $vals['toType'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['deliveredTime'])) {
        $this->deliveredTime = $vals['deliveredTime'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['hasContent'])) {
        $this->hasContent = $vals['hasContent'];
      }
      if (isset($vals['contentType'])) {
        $this->contentType = $vals['contentType'];
      }
      if (isset($vals['contentPreview'])) {
        $this->contentPreview = $vals['contentPreview'];
      }
      if (isset($vals['contentMetadata'])) {
        $this->contentMetadata = $vals['contentMetadata'];
      }
    }
  }

  public function getName() {
    return 'Message';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->_from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->toType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->deliveredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->location = new \x9119x\Location();
            $xfer += $this->location->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentPreview);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::MAP) {
            $this->contentMetadata = array();
            $_size14 = 0;
            $_ktype15 = 0;
            $_vtype16 = 0;
            $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $key19 = '';
              $val20 = '';
              $xfer += $input->readString($key19);
              $xfer += $input->readString($val20);
              $this->contentMetadata[$key19] = $val20;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Message');
    if ($this->_from !== null) {
      $xfer += $output->writeFieldBegin('_from', TType::STRING, 1);
      $xfer += $output->writeString($this->_from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to !== null) {
      $xfer += $output->writeFieldBegin('to', TType::STRING, 2);
      $xfer += $output->writeString($this->to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toType !== null) {
      $xfer += $output->writeFieldBegin('toType', TType::I32, 3);
      $xfer += $output->writeI32($this->toType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 4);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 5);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliveredTime !== null) {
      $xfer += $output->writeFieldBegin('deliveredTime', TType::I64, 6);
      $xfer += $output->writeI64($this->deliveredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 10);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      if (!is_object($this->location)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('location', TType::STRUCT, 11);
      $xfer += $this->location->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasContent !== null) {
      $xfer += $output->writeFieldBegin('hasContent', TType::BOOL, 14);
      $xfer += $output->writeBool($this->hasContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentType !== null) {
      $xfer += $output->writeFieldBegin('contentType', TType::I32, 15);
      $xfer += $output->writeI32($this->contentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentPreview !== null) {
      $xfer += $output->writeFieldBegin('contentPreview', TType::STRING, 17);
      $xfer += $output->writeString($this->contentPreview);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentMetadata !== null) {
      if (!is_array($this->contentMetadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contentMetadata', TType::MAP, 18);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->contentMetadata));
        {
          foreach ($this->contentMetadata as $kiter21 => $viter22)
          {
            $xfer += $output->writeString($kiter21);
            $xfer += $output->writeString($viter22);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageOperation {
  static $_TSPEC;

  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $reqSeq = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $param1 = null;
  /**
   * @var string
   */
  public $param2 = null;
  /**
   * @var string
   */
  public $param3 = null;
  /**
   * @var \x9119x\Message
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reqSeq',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'param1',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'param2',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'param3',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'message',
          'type' => TType::STRUCT,
          'class' => '\x9119x\Message',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['param1'])) {
        $this->param1 = $vals['param1'];
      }
      if (isset($vals['param2'])) {
        $this->param2 = $vals['param2'];
      }
      if (isset($vals['param3'])) {
        $this->param3 = $vals['param3'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'MessageOperation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->message = new \x9119x\Message();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageOperation');
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 1);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 4);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 5);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param1 !== null) {
      $xfer += $output->writeFieldBegin('param1', TType::STRING, 10);
      $xfer += $output->writeString($this->param1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param2 !== null) {
      $xfer += $output->writeFieldBegin('param2', TType::STRING, 11);
      $xfer += $output->writeString($this->param2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param3 !== null) {
      $xfer += $output->writeFieldBegin('param3', TType::STRING, 12);
      $xfer += $output->writeString($this->param3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 20);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Operation {
  static $_TSPEC;

  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $reqSeq = null;
  /**
   * @var string
   */
  public $checksum = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $param1 = null;
  /**
   * @var string
   */
  public $param2 = null;
  /**
   * @var string
   */
  public $param3 = null;
  /**
   * @var \x9119x\Message
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reqSeq',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'checksum',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'param1',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'param2',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'param3',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'message',
          'type' => TType::STRUCT,
          'class' => '\x9119x\Message',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['checksum'])) {
        $this->checksum = $vals['checksum'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['param1'])) {
        $this->param1 = $vals['param1'];
      }
      if (isset($vals['param2'])) {
        $this->param2 = $vals['param2'];
      }
      if (isset($vals['param3'])) {
        $this->param3 = $vals['param3'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'Operation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->checksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->message = new \x9119x\Message();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Operation');
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 1);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 4);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checksum !== null) {
      $xfer += $output->writeFieldBegin('checksum', TType::STRING, 5);
      $xfer += $output->writeString($this->checksum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param1 !== null) {
      $xfer += $output->writeFieldBegin('param1', TType::STRING, 10);
      $xfer += $output->writeString($this->param1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param2 !== null) {
      $xfer += $output->writeFieldBegin('param2', TType::STRING, 11);
      $xfer += $output->writeString($this->param2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param3 !== null) {
      $xfer += $output->writeFieldBegin('param3', TType::STRING, 12);
      $xfer += $output->writeString($this->param3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 20);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Profile {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $userid = null;
  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $regionCode = null;
  /**
   * @var string
   */
  public $displayName = null;
  /**
   * @var string
   */
  public $phoneticName = null;
  /**
   * @var string
   */
  public $pictureStatus = null;
  /**
   * @var string
   */
  public $thumbnailUrl = null;
  /**
   * @var string
   */
  public $statusMessage = null;
  /**
   * @var bool
   */
  public $allowSearchByUserid = null;
  /**
   * @var bool
   */
  public $allowSearchByEmail = null;
  /**
   * @var string
   */
  public $picturePath = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userid',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'regionCode',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'phoneticName',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'pictureStatus',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'thumbnailUrl',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'statusMessage',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'allowSearchByUserid',
          'type' => TType::BOOL,
          ),
        32 => array(
          'var' => 'allowSearchByEmail',
          'type' => TType::BOOL,
          ),
        33 => array(
          'var' => 'picturePath',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['regionCode'])) {
        $this->regionCode = $vals['regionCode'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['phoneticName'])) {
        $this->phoneticName = $vals['phoneticName'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
      if (isset($vals['allowSearchByUserid'])) {
        $this->allowSearchByUserid = $vals['allowSearchByUserid'];
      }
      if (isset($vals['allowSearchByEmail'])) {
        $this->allowSearchByEmail = $vals['allowSearchByEmail'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
    }
  }

  public function getName() {
    return 'Profile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regionCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneticName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowSearchByUserid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowSearchByEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Profile');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::STRING, 3);
      $xfer += $output->writeString($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 10);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 11);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regionCode !== null) {
      $xfer += $output->writeFieldBegin('regionCode', TType::STRING, 12);
      $xfer += $output->writeString($this->regionCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 20);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneticName !== null) {
      $xfer += $output->writeFieldBegin('phoneticName', TType::STRING, 21);
      $xfer += $output->writeString($this->phoneticName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 22);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 23);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 24);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowSearchByUserid !== null) {
      $xfer += $output->writeFieldBegin('allowSearchByUserid', TType::BOOL, 31);
      $xfer += $output->writeBool($this->allowSearchByUserid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowSearchByEmail !== null) {
      $xfer += $output->writeFieldBegin('allowSearchByEmail', TType::BOOL, 32);
      $xfer += $output->writeBool($this->allowSearchByEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 33);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Room {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var int
   */
  public $createdTime = null;
  /**
   * @var \x9119x\Contact[]
   */
  public $contacts = null;
  /**
   * @var bool
   */
  public $notificationDisabled = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'contacts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\x9119x\Contact',
            ),
          ),
        31 => array(
          'var' => 'notificationDisabled',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['contacts'])) {
        $this->contacts = $vals['contacts'];
      }
      if (isset($vals['notificationDisabled'])) {
        $this->notificationDisabled = $vals['notificationDisabled'];
      }
    }
  }

  public function getName() {
    return 'Room';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->contacts = array();
            $_size23 = 0;
            $_etype26 = 0;
            $xfer += $input->readListBegin($_etype26, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $elem28 = new \x9119x\Contact();
              $xfer += $elem28->read($input);
              $this->contacts []= $elem28;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationDisabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Room');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contacts !== null) {
      if (!is_array($this->contacts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contacts', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->contacts));
        {
          foreach ($this->contacts as $iter29)
          {
            $xfer += $iter29->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDisabled !== null) {
      $xfer += $output->writeFieldBegin('notificationDisabled', TType::BOOL, 31);
      $xfer += $output->writeBool($this->notificationDisabled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RSAKey {
  static $_TSPEC;

  /**
   * @var string
   */
  public $keynm = null;
  /**
   * @var string
   */
  public $nvalue = null;
  /**
   * @var string
   */
  public $evalue = null;
  /**
   * @var string
   */
  public $sessionKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keynm',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'nvalue',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'evalue',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sessionKey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keynm'])) {
        $this->keynm = $vals['keynm'];
      }
      if (isset($vals['nvalue'])) {
        $this->nvalue = $vals['nvalue'];
      }
      if (isset($vals['evalue'])) {
        $this->evalue = $vals['evalue'];
      }
      if (isset($vals['sessionKey'])) {
        $this->sessionKey = $vals['sessionKey'];
      }
    }
  }

  public function getName() {
    return 'RSAKey';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->keynm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nvalue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->evalue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RSAKey');
    if ($this->keynm !== null) {
      $xfer += $output->writeFieldBegin('keynm', TType::STRING, 1);
      $xfer += $output->writeString($this->keynm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nvalue !== null) {
      $xfer += $output->writeFieldBegin('nvalue', TType::STRING, 2);
      $xfer += $output->writeString($this->nvalue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->evalue !== null) {
      $xfer += $output->writeFieldBegin('evalue', TType::STRING, 3);
      $xfer += $output->writeString($this->evalue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionKey !== null) {
      $xfer += $output->writeFieldBegin('sessionKey', TType::STRING, 4);
      $xfer += $output->writeString($this->sessionKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TalkException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $reason = null;
  /**
   * @var array
   */
  public $parameterMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parameterMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['parameterMap'])) {
        $this->parameterMap = $vals['parameterMap'];
      }
    }
  }

  public function getName() {
    return 'TalkException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->parameterMap = array();
            $_size30 = 0;
            $_ktype31 = 0;
            $_vtype32 = 0;
            $xfer += $input->readMapBegin($_ktype31, $_vtype32, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $key35 = '';
              $val36 = '';
              $xfer += $input->readString($key35);
              $xfer += $input->readString($val36);
              $this->parameterMap[$key35] = $val36;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TalkException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 2);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameterMap !== null) {
      if (!is_array($this->parameterMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameterMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->parameterMap));
        {
          foreach ($this->parameterMap as $kiter37 => $viter38)
          {
            $xfer += $output->writeString($kiter37);
            $xfer += $output->writeString($viter38);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Ticket {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var int
   */
  public $expirationTime = null;
  /**
   * @var int
   */
  public $maxUseCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'expirationTime',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'maxUseCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['expirationTime'])) {
        $this->expirationTime = $vals['expirationTime'];
      }
      if (isset($vals['maxUseCount'])) {
        $this->maxUseCount = $vals['maxUseCount'];
      }
    }
  }

  public function getName() {
    return 'Ticket';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expirationTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxUseCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Ticket');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expirationTime !== null) {
      $xfer += $output->writeFieldBegin('expirationTime', TType::I64, 10);
      $xfer += $output->writeI64($this->expirationTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxUseCount !== null) {
      $xfer += $output->writeFieldBegin('maxUseCount', TType::I32, 21);
      $xfer += $output->writeI32($this->maxUseCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


